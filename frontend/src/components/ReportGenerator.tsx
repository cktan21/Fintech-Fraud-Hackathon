import { Transaction } from '@/types/transaction';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { FileText } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ReportGeneratorProps {
  transactions: Transaction[];
}

export const ReportGenerator = ({ transactions }: ReportGeneratorProps) => {
  const { toast } = useToast();

  const generateReport = () => {
    const fraudulent = transactions.filter(t => t.is_fraudulent);
    const blocked = transactions.filter(t => t.status === 'blocked');
    const approved = transactions.filter(t => t.status === 'approved');
    const totalAmount = transactions.reduce((sum, t) => sum + t.amount, 0);
    const fraudRate = transactions.length > 0 ? (fraudulent.length / transactions.length) * 100 : 0;

    const reportContent = `
FRAUD DETECTION REPORT
Generated: ${new Date().toLocaleString()}
=========================================

EXECUTIVE SUMMARY
-----------------
Total Transactions: ${transactions.length}
Fraudulent Transactions: ${fraudulent.length}
Fraud Rate: ${fraudRate.toFixed(2)}%
Blocked Transactions: ${blocked.length}
Approved Transactions: ${approved.length}
Total Transaction Amount: $${totalAmount.toLocaleString()}

FRAUD ANALYSIS
--------------
High Risk Transactions (Score > 80):
${fraudulent.filter(t => t.fraud_score > 80).length} transactions

Medium Risk Transactions (Score 60-80):
${fraudulent.filter(t => t.fraud_score >= 60 && t.fraud_score <= 80).length} transactions

TRANSACTION DETAILS
-------------------
${transactions.slice(0, 10).map((t, i) => `
Transaction ${i + 1}:
  Date/Time: ${t.date} ${t.time}
  Sender: ${t.sender_account} (${t.sender_bank_location})
  Receiver: ${t.receiver_account} (${t.receiver_bank_location})
  Amount: ${t.amount} ${t.payment_currency}
  Payment Type: ${t.payment_type}
  Fraud Score: ${t.fraud_score}%
  Status: ${t.status.toUpperCase()}
  ${t.is_fraudulent ? '⚠️ FLAGGED AS FRAUDULENT' : '✓ Clean Transaction'}
`).join('\n')}

${transactions.length > 10 ? `... and ${transactions.length - 10} more transactions` : ''}

RECOMMENDATIONS
---------------
${fraudRate > 30 ? '⚠️ HIGH FRAUD RATE DETECTED - Immediate review recommended' : ''}
${fraudRate > 15 && fraudRate <= 30 ? '⚠️ ELEVATED FRAUD RATE - Enhanced monitoring suggested' : ''}
${fraudRate <= 15 ? '✓ Fraud rate within normal parameters' : ''}

Report generated by Fraud Detection System
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `fraud-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: 'Report Generated',
      description: 'Fraud detection report has been downloaded'
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generate Report</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <p className="text-sm text-muted-foreground">
          Generate a comprehensive fraud detection report including transaction statistics,
          fraud analysis, and recommendations.
        </p>
        <Button onClick={generateReport} className="w-full">
          <FileText className="mr-2 h-4 w-4" />
          Generate Full Report
        </Button>
      </CardContent>
    </Card>
  );
};
